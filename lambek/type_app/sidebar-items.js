initSidebarItems({"enum":[["Identity","`App<Identity, X> ~ X`"],["OptionF","`App<OptionF, X> ~ Option<X>`"],["VecF","`App<VecF, X> ~ Vec<X>`"]],"fn":[["with_type_app",""],["wrap_app","Wraps a type `FX` into [App] in the presence of the [TypeApp] constraint, allowing subsequent use of [App] to not depend on [TypeApp]."]],"struct":[["App","Newtype for a boxed value of [HasTypeApp]."],["AppF",""],["Compose",""],["ComposeApp",""],["Const","`App<Const<A>, X> ~ A`"],["ResultF","`App<ResultF<E>, X> ~ Result<E, X>`"]],"trait":[["CloneApp",""],["HasTypeApp","Encapsulates an applied type into a trait object to prevent `TypeApp` constraints from propagating to type signatures."],["TypeApp","A type `F: TypeApp<X>` have the associated type `Applied` as the result of applying a type `F` of kind `Type -> Type` to `X`."],["TypeAppCont",""],["TypeAppGeneric",""],["TypeAppGenericUnsized",""],["TypeCon","A proxy type `F: TypeCon` to mark itself as having the kind `Type -> Type`."]],"type":[["Applied",""]]});